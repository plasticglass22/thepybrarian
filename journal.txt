pybrarian

this is, in essence, just a little tool to index/organize/etc. my digital textbook collection. in the beginning, 
the idea was to make a fairly OOP leaning project, but turns out i'm dogsh*t at programming.

so, i'm starting over. i saw this series of youtube videos called "endless to-do app", where a guy builds a to-do 
app piece by piece, feature by feature, basically forever. real "ship of theseus" kind of thing, but with code.

so that's what i'm gonna do. start small, build brick by brick until i have an actual shippable piece of software. 
might even become a better programmer in the process.



PART 0: 5 June 2024
    nuke all the old stuff. ignore the old attempts, back to square one.

PART 1: 6 June 2024
    task 1:
        list all the files in a directory -> recursively list subdirectories

    getting the cwd is easy enough with the os module. next thing to do is to collect and print the names of objects 
    in the dir. glob.glob() sorta works for this. as is, it is so far just getting files, not subdirs. lemme rtfm for 
    a minute.

    ok, i got glob.glob() to recursively list all the files in CWD. next problem: listing subdirectories on their own 
    line.

    task 2:
        list subdir names as if they were files, then list their contents.

    something tells me this is gonna take some regular expressions, we'll see.

    hold up, glob isn't grabbing the files in testdir1, which is my first-level nested dir.
    ok, figured that out pretty fast. in the glob pattern i was initially using, i was matching "./**/*.*", which 
    actually restricts glob to matching files with extensions. i changed that to "./**/*" and it's working fine.

    on to the actual task at hand, right now the output looks like this:
        item:  ./testdir1/testdir2
        item:  ./testdir1/test1_2
        item:  ./testdir1/test1_1
        item:  ./testdir1/testdir2/test2_1.txt
        item:  ./testdir1/testdir2/test2_2.sh

    somehow i want to get it to look like this:
        directory: $CWD/testdir1
            file: test1_2
            file: test1_1
            directory: $CWD/testdir1/testdir2
                file: test2_1.txt
                file: test2_2.sh

    i made some basic listing functions, contents() and fullContents(), in the utils.py module. tbh, the real trick here 
    is excluding the things i don't want to include, like pycache, from the output. seems simple enough, but i'm hungry, 
    so it might be a job for tomorrow morning.

    one thing i'm noticing is i'm having trouble really being certain of what to do w/r/t the functionality of the program.

PART 2:
    task:
        get the contents() and fullContents() functions running smooth as possible, and make the output pretty. this will 
        involve stripping noise from each result, and exluding results i don't want.

    
    task:
        be able to distinguish subdirs from individual files programatically, so i can format the output even better.


    testing the current setup on my actual books directory, it looks like it works in a breadth first search. i want it to be 
    DFS.

    THIS IS WHAT I WANT THE OUTPUT TO LOOK LIKE:

        my_directory/
        |
        ├── sub_dir/
        |   ├── bar.py
        |   └── foo.py
        |
        ├── sub_dir_b/
        |   └── file4.txt
        |
        ├── sub_dir_c/
        |   ├── config.py
        |   └── file5.txt
        |
        ├── file1.py
        ├── file2.csv
        └── file3.txt

    for that i may actually use os.walk instead of glob.glob(). i'll play around with it and see which is better.

    issue i'm having is with os.walk(): how do i just get a simple list of filenames?

    ON THE RIGHT TRACK:
        for root, dirs, files in os.walk(dir, topdown=True):
            for name in files:
                # print(os.path.join(root, name)) ## PRINTS FULL PATH OF FILE
                # print(root) ## PRINTS DIR PATH UP TO NOT INCLUDING FILENAME
                # print(name) ## PRINTS JUST FILENAME, NO DIR NAMES
                print(root, name)
            for name in dirs:
                print(os.path.join(root, name)) 

        >> just need to exclude git stuff

    EVEN RIGHTER TRACK:
        for root, subdirs, files in os.walk(dir, topdown=True):
        for file in files:
            # print(root + os.sep + file)
            path = root, file
            for item in EXCLUDE_PATTERNS:
                if item not in path:
                    print(path)
                else:
                    pass


    THIS IS THE WINNER:
        for root, subdirs, files in os.walk(dir, topdown=True):
        for file in files:
            # print(root + os.sep + file)
            path = str(root + "/" + file)
            for item in EXCLUDE_PATTERNS:
                if item not in path:
                    pass
                else:
                    path = ""
            if path != "": print(path)

        >> just need to format it now
            >> remove parts of path above supplied dir